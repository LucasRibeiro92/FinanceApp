package com.example.financeapp.ui.view

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.Observer
import com.example.financeapp.databinding.ActivityBudgetSettingBinding
import com.example.financeapp.model.data.local.entity.Budget
import com.example.financeapp.ui.viewmodel.BudgetViewModel
import org.koin.androidx.viewmodel.ext.android.viewModel

class BudgetSettingActivity : AppCompatActivity() {

    private lateinit var binding: ActivityBudgetSettingBinding
    private val budgetViewModel: BudgetViewModel by viewModel()
    private var currentBudget: Budget? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //Setups
        setupBindings()
        setupSaveButton()
        setupBackButton()

        // Observe the budget and populate the inputs if it exists
        budgetViewModel.getBudget().observe(this, Observer { budget ->
            if (budget != null) {
                currentBudget = budget
                populateBudgetFields(budget)
            }
        })
    }

    private fun setupBindings() {
        binding = ActivityBudgetSettingBinding.inflate(layoutInflater)
        setContentView(binding.root)
    }

    private fun setupBackButton() {
        binding.ivBack.setOnClickListener {
            onBackPressed()
        }
    }

    private fun setupSaveButton() {
        binding.btnSave.setOnClickListener {
            saveBudget()
        }
    }

    private fun populateBudgetFields(budget: Budget) {
        binding.etHealthLimit.setText(budget.healthLimit.toString())
        binding.etFoodLimit.setText(budget.foodLimit.toString())
        binding.etTransportLimit.setText(budget.transportLimit.toString())
        binding.etEntertainmentLimit.setText(budget.entertainmentLimit.toString())
        binding.etUtilitiesLimit.setText(budget.utilitiesLimit.toString())
        binding.etOtherLimit.setText(budget.otherLimit.toString())
    }

    private fun saveBudget() {
        val healthLimit = binding.etHealthLimit.text.toString().toDoubleOrNull() ?: 0.0
        val foodLimit = binding.etFoodLimit.text.toString().toDoubleOrNull() ?: 0.0
        val transportLimit = binding.etTransportLimit.text.toString().toDoubleOrNull() ?: 0.0
        val entertainmentLimit = binding.etEntertainmentLimit.text.toString().toDoubleOrNull() ?: 0.0
        val utilitiesLimit = binding.etUtilitiesLimit.text.toString().toDoubleOrNull() ?: 0.0
        val otherLimit = binding.etOtherLimit.text.toString().toDoubleOrNull() ?: 0.0

        if (currentBudget == null) {
            // Create a new budget
            val newBudget = Budget(
                id = 0, // Auto-generated by the database
                healthLimit = healthLimit,
                foodLimit = foodLimit,
                transportLimit = transportLimit,
                entertainmentLimit = entertainmentLimit,
                utilitiesLimit = utilitiesLimit,
                otherLimit = otherLimit
            )
            budgetViewModel.insertBudget(newBudget)
        } else {
            // Update existing budget
            val updatedBudget = currentBudget!!.copy(
                healthLimit = healthLimit,
                foodLimit = foodLimit,
                transportLimit = transportLimit,
                entertainmentLimit = entertainmentLimit,
                utilitiesLimit = utilitiesLimit,
                otherLimit = otherLimit
            )
            budgetViewModel.updateBudget(updatedBudget)
        }

        finish()
    }
}
